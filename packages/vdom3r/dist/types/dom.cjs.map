{"version":3,"sources":["../../src/types/dom.ts"],"sourcesContent":["export const Fragment = Symbol(\"Fragment\");\n// Dom Event Handler Type\nexport type DOMEventHandler<K extends keyof HTMLElementEventMap> = (\n    event: HTMLElementEventMap[K],\n) => void;\n// Style type that can be string or class\nexport type StyleValue = string | Partial<CSSStyleDeclaration> | null;\n\n// Class type that can be string object or array\nexport type ClassValue =\n    | string\n    | Record<string, boolean>\n    | (string | Record<string, boolean>)[]\n    | null;\n\n// Ref type\nexport type RefCallback<T> = (el: T | null) => void;\nexport type RefObject<T> = { value: T | null };\nexport type Ref<T = any> = RefCallback<T> | RefObject<T> | string;\n\n// Props for HTML elements\nexport type HTMLProps<T extends keyof HTMLElementTagNameMap> = Partial<{\n    // DOM properties and attributes\n    [K in keyof HTMLElementTagNameMap[T]]: HTMLElementTagNameMap[T][K];\n}>;\n\n// EmitsOptions for better type safety in events\nexport type EmitsOptions = Record<string, ((...args: any[]) => any) | null>;\n\n// Context type with proper event emitter\nexport interface ComponentContext<E extends EmitsOptions = {}> {\n    emit: E extends Record<infer K, any>\n        ? (event: K, ...args: any[]) => void\n        : (event: string, ...args: any[]) => void;\n}\n\n// Functional component with proper typing\nexport type FunctionComponent<\n    P extends VNodeProps = VNodeProps,\n    E extends EmitsOptions = {},\n> = (props: P, context: ComponentContext<E>) => VNode | null | undefined;\n\n// Event handle type\nexport type EventHandlers = {\n    [K in keyof HTMLElementEventMap as `on${Capitalize<K>}`]?: DOMEventHandler<K>;\n};\n\nexport type VNodeTypes =\n    | keyof HTMLElementTagNameMap\n    | FunctionComponent\n    | typeof Fragment;\n\nexport type VNodeChild =\n    | VNode\n    | string\n    | number\n    | boolean\n    | null\n    | undefined\n    | FunctionComponent\n    | VNodeChild[]\n    | typeof Fragment;\n\nexport interface VNodeProps extends EventHandlers, Record<string, unknown> {\n    className?: string;\n    style?: StyleValue;\n    class?: ClassValue;\n    key?: string | number;\n    ref?: Ref;\n    children?: VNodeChild | VNodeChild[]; // Include children in props\n}\n\nexport interface VNode<P extends VNodeProps = VNodeProps> {\n    type: VNodeTypes;\n    props: P;\n    children: VNodeChild[];\n    el?: Node | null;\n    key?: string | number | null | undefined;\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,IAAA,eAAAC,EAAAH,GAAO,IAAME,EAAW,OAAO,UAAU","names":["dom_exports","__export","Fragment","__toCommonJS"]}